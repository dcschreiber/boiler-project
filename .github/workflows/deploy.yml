name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  BACKEND_SERVICE_NAME: saas-backend
  FRONTEND_BUCKET_NAME: ${{ secrets.FRONTEND_BUCKET_NAME }}

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Google Cloud
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Build and push backend image
      working-directory: ./backend
      run: |
        docker build -t gcr.io/$GCP_PROJECT_ID/$BACKEND_SERVICE_NAME:$GITHUB_SHA .
        docker push gcr.io/$GCP_PROJECT_ID/$BACKEND_SERVICE_NAME:$GITHUB_SHA
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $BACKEND_SERVICE_NAME \
          --image gcr.io/$GCP_PROJECT_ID/$BACKEND_SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $GCP_REGION \
          --allow-unauthenticated \
          --set-env-vars "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" \
          --set-env-vars "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" \
          --set-env-vars "SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}" \
          --set-env-vars "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" \
          --set-env-vars "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" \
          --set-env-vars "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" \
          --set-env-vars "JWT_SECRET=${{ secrets.JWT_SECRET }}" \
          --set-env-vars "CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}" \
          --set-env-vars "STRIPE_ENABLED=${{ secrets.STRIPE_ENABLED }}" \
          --set-env-vars "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" \
          --set-env-vars "STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}" \
          --set-env-vars "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" \
          --set-env-vars "ENVIRONMENT=production" \
          --min-instances 0 \
          --max-instances 100 \
          --memory 512Mi

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Get backend URL
      id: backend-url
      run: |
        BACKEND_URL=$(gcloud run services describe $BACKEND_SERVICE_NAME --platform managed --region $GCP_REGION --format 'value(status.url)')
        echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT
    
    - name: Build frontend
      run: npm run build --workspace=frontend
      env:
        VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        VITE_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        VITE_API_URL: ${{ steps.backend-url.outputs.url }}
        VITE_APP_URL: ${{ secrets.FRONTEND_URL }}
        VITE_STRIPE_ENABLED: ${{ secrets.STRIPE_ENABLED }}
        VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
        VITE_GOOGLE_ANALYTICS_ID: ${{ secrets.GOOGLE_ANALYTICS_ID }}
        VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
    
    - name: Setup Google Cloud
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Deploy to Cloud Storage
      working-directory: ./frontend/dist
      run: |
        gsutil -m rsync -r -d . gs://$FRONTEND_BUCKET_NAME
        gsutil -m setmeta -h "Cache-Control:public, max-age=31536000" gs://$FRONTEND_BUCKET_NAME/assets/**
        gsutil -m setmeta -h "Cache-Control:no-cache, no-store, must-revalidate" gs://$FRONTEND_BUCKET_NAME/index.html

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-backend.result }}" == "success" ] && [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi